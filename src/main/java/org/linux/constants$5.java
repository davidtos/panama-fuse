// Generated by jextract

package org.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$5 {

    static final FunctionDescriptor fuse_remove_signal_handlers$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle fuse_remove_signal_handlers$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "fuse_remove_signal_handlers",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$5.fuse_remove_signal_handlers$FUNC, false
    );
    static final FunctionDescriptor fcntl$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle fcntl$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "fcntl",
        "(II[Ljava/lang/Object;)I",
        constants$5.fcntl$FUNC, true
    );
    static final FunctionDescriptor open$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle open$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "open",
        "(Ljdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        constants$5.open$FUNC, true
    );
    static final FunctionDescriptor openat$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle openat$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "openat",
        "(ILjdk/incubator/foreign/MemoryAddress;I[Ljava/lang/Object;)I",
        constants$5.openat$FUNC, true
    );
    static final FunctionDescriptor creat$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_INT
    );
    static final MethodHandle creat$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "creat",
        "(Ljdk/incubator/foreign/MemoryAddress;I)I",
        constants$5.creat$FUNC, false
    );
    static final FunctionDescriptor lockf$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_LONG
    );
    static final MethodHandle lockf$MH = RuntimeHelper.downcallHandle(
        fuse_h.LIBRARIES, "lockf",
        "(IIJ)I",
        constants$5.lockf$FUNC, false
    );
}


