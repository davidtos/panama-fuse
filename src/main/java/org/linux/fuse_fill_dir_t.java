// Generated by jextract

package org.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface fuse_fill_dir_t {

    int apply(MemoryAddress x0, MemoryAddress x1, MemoryAddress x2, long x3, int x4);
    static MemoryAddress allocate(fuse_fill_dir_t fi) {
        return RuntimeHelper.upcallStub(fuse_fill_dir_t.class, fi, constants$16.fuse_fill_dir_t$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I");
    }
    static MemoryAddress allocate(fuse_fill_dir_t fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(fuse_fill_dir_t.class, fi, constants$16.fuse_fill_dir_t$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JI)I", scope);
    }
    static fuse_fill_dir_t ofAddress(MemoryAddress addr) {
        return (MemoryAddress x0, MemoryAddress x1, MemoryAddress x2, long x3, int x4) -> {
            try {
                return (int)constants$16.fuse_fill_dir_t$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


