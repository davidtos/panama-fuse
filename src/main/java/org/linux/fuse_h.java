// Generated by jextract

package org.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class fuse_h  {

    static {
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ fuse_h() {}
    public static int FUSE_USE_VERSION() {
        return (int)35L;
    }
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __USE_FILE_OFFSET64() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)34L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int FUSE_MAJOR_VERSION() {
        return (int)3L;
    }
    public static int FUSE_MINOR_VERSION() {
        return (int)10L;
    }
    public static int FUSE_IOCTL_MAX_IOV() {
        return (int)256L;
    }
    public static int _FCNTL_H() {
        return (int)1L;
    }
    public static int __O_LARGEFILE() {
        return (int)0L;
    }
    public static int F_GETLK64() {
        return (int)5L;
    }
    public static int F_SETLK64() {
        return (int)6L;
    }
    public static int F_SETLKW64() {
        return (int)7L;
    }
    public static int O_ACCMODE() {
        return (int)3L;
    }
    public static int O_RDONLY() {
        return (int)0L;
    }
    public static int O_WRONLY() {
        return (int)1L;
    }
    public static int O_RDWR() {
        return (int)2L;
    }
    public static int O_CREAT() {
        return (int)64L;
    }
    public static int O_EXCL() {
        return (int)128L;
    }
    public static int O_NOCTTY() {
        return (int)256L;
    }
    public static int O_TRUNC() {
        return (int)512L;
    }
    public static int O_APPEND() {
        return (int)1024L;
    }
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    public static int O_SYNC() {
        return (int)1052672L;
    }
    public static int O_ASYNC() {
        return (int)8192L;
    }
    public static int __O_DIRECTORY() {
        return (int)65536L;
    }
    public static int __O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int __O_CLOEXEC() {
        return (int)524288L;
    }
    public static int __O_DIRECT() {
        return (int)16384L;
    }
    public static int __O_NOATIME() {
        return (int)262144L;
    }
    public static int __O_PATH() {
        return (int)2097152L;
    }
    public static int __O_DSYNC() {
        return (int)4096L;
    }
    public static int F_DUPFD() {
        return (int)0L;
    }
    public static int F_GETFD() {
        return (int)1L;
    }
    public static int F_SETFD() {
        return (int)2L;
    }
    public static int F_GETFL() {
        return (int)3L;
    }
    public static int F_SETFL() {
        return (int)4L;
    }
    public static int __F_SETOWN() {
        return (int)8L;
    }
    public static int __F_GETOWN() {
        return (int)9L;
    }
    public static int __F_SETSIG() {
        return (int)10L;
    }
    public static int __F_GETSIG() {
        return (int)11L;
    }
    public static int __F_SETOWN_EX() {
        return (int)15L;
    }
    public static int __F_GETOWN_EX() {
        return (int)16L;
    }
    public static int F_DUPFD_CLOEXEC() {
        return (int)1030L;
    }
    public static int FD_CLOEXEC() {
        return (int)1L;
    }
    public static int F_RDLCK() {
        return (int)0L;
    }
    public static int F_WRLCK() {
        return (int)1L;
    }
    public static int F_UNLCK() {
        return (int)2L;
    }
    public static int F_EXLCK() {
        return (int)4L;
    }
    public static int F_SHLCK() {
        return (int)8L;
    }
    public static int LOCK_SH() {
        return (int)1L;
    }
    public static int LOCK_EX() {
        return (int)2L;
    }
    public static int LOCK_NB() {
        return (int)4L;
    }
    public static int LOCK_UN() {
        return (int)8L;
    }
    public static int __POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int __POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int POSIX_FADV_NORMAL() {
        return (int)0L;
    }
    public static int POSIX_FADV_RANDOM() {
        return (int)1L;
    }
    public static int POSIX_FADV_SEQUENTIAL() {
        return (int)2L;
    }
    public static int POSIX_FADV_WILLNEED() {
        return (int)3L;
    }
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    public static int __S_IFMT() {
        return (int)61440L;
    }
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    public static int __S_IFREG() {
        return (int)32768L;
    }
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    public static int __S_ISUID() {
        return (int)2048L;
    }
    public static int __S_ISGID() {
        return (int)1024L;
    }
    public static int __S_ISVTX() {
        return (int)512L;
    }
    public static int __S_IREAD() {
        return (int)256L;
    }
    public static int __S_IWRITE() {
        return (int)128L;
    }
    public static int __S_IEXEC() {
        return (int)64L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int AT_SYMLINK_NOFOLLOW() {
        return (int)256L;
    }
    public static int AT_REMOVEDIR() {
        return (int)512L;
    }
    public static int AT_SYMLINK_FOLLOW() {
        return (int)1024L;
    }
    public static int AT_EACCESS() {
        return (int)512L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int _SYS_STAT_H() {
        return (int)1L;
    }
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    public static int _SYS_STATVFS_H() {
        return (int)1L;
    }
    public static int _SYS_UIO_H() {
        return (int)1L;
    }
    public static int __iovec_defined() {
        return (int)1L;
    }
    public static int _BITS_UIO_LIM_H() {
        return (int)1L;
    }
    public static int __IOV_MAX() {
        return (int)1024L;
    }
    public static MethodHandle fuse_opt_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_parse$MH,"fuse_opt_parse");
    }
    public static int fuse_opt_parse ( Addressable args,  Addressable data,  Addressable opts,  Addressable proc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.fuse_opt_parse$MH, "fuse_opt_parse");
        try {
            return (int)mh$.invokeExact(args.address(), data.address(), opts.address(), proc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_opt$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt$MH,"fuse_opt_add_opt");
    }
    public static int fuse_opt_add_opt ( Addressable opts,  Addressable opt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt$MH, "fuse_opt_add_opt");
        try {
            return (int)mh$.invokeExact(opts.address(), opt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_opt_escaped$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt_escaped$MH,"fuse_opt_add_opt_escaped");
    }
    public static int fuse_opt_add_opt_escaped ( Addressable opts,  Addressable opt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_opt_escaped$MH, "fuse_opt_add_opt_escaped");
        try {
            return (int)mh$.invokeExact(opts.address(), opt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_add_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_arg$MH,"fuse_opt_add_arg");
    }
    public static int fuse_opt_add_arg ( Addressable args,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.fuse_opt_add_arg$MH, "fuse_opt_add_arg");
        try {
            return (int)mh$.invokeExact(args.address(), arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_insert_arg$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_insert_arg$MH,"fuse_opt_insert_arg");
    }
    public static int fuse_opt_insert_arg ( Addressable args,  int pos,  Addressable arg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.fuse_opt_insert_arg$MH, "fuse_opt_insert_arg");
        try {
            return (int)mh$.invokeExact(args.address(), pos, arg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_free_args$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_free_args$MH,"fuse_opt_free_args");
    }
    public static void fuse_opt_free_args ( Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.fuse_opt_free_args$MH, "fuse_opt_free_args");
        try {
            mh$.invokeExact(args.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_opt_match$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_opt_match$MH,"fuse_opt_match");
    }
    public static int fuse_opt_match ( Addressable opts,  Addressable opt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.fuse_opt_match$MH, "fuse_opt_match");
        try {
            return (int)mh$.invokeExact(opts.address(), opt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_LOG_EMERG() {
        return (int)0L;
    }
    public static int FUSE_LOG_ALERT() {
        return (int)1L;
    }
    public static int FUSE_LOG_CRIT() {
        return (int)2L;
    }
    public static int FUSE_LOG_ERR() {
        return (int)3L;
    }
    public static int FUSE_LOG_WARNING() {
        return (int)4L;
    }
    public static int FUSE_LOG_NOTICE() {
        return (int)5L;
    }
    public static int FUSE_LOG_INFO() {
        return (int)6L;
    }
    public static int FUSE_LOG_DEBUG() {
        return (int)7L;
    }
    public static MethodHandle fuse_set_log_func$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fuse_set_log_func$MH,"fuse_set_log_func");
    }
    public static void fuse_set_log_func ( Addressable func) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.fuse_set_log_func$MH, "fuse_set_log_func");
        try {
            mh$.invokeExact(func.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_log$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fuse_log$MH,"fuse_log");
    }
    public static void fuse_log ( int level,  Addressable fmt, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.fuse_log$MH, "fuse_log");
        try {
            mh$.invokeExact(level, fmt.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout __int16_t = C_SHORT;
    public static ValueLayout __int32_t = C_INT;
    public static ValueLayout __int64_t = C_LONG;
    public static ValueLayout __int_least16_t = C_SHORT;
    public static ValueLayout __int_least32_t = C_INT;
    public static ValueLayout __int_least64_t = C_LONG;
    public static ValueLayout __quad_t = C_LONG;
    public static ValueLayout __intmax_t = C_LONG;
    public static ValueLayout __off_t = C_LONG;
    public static ValueLayout __off64_t = C_LONG;
    public static ValueLayout __pid_t = C_INT;
    public static ValueLayout __clock_t = C_LONG;
    public static ValueLayout __time_t = C_LONG;
    public static ValueLayout __suseconds_t = C_LONG;
    public static ValueLayout __suseconds64_t = C_LONG;
    public static ValueLayout __daddr_t = C_INT;
    public static ValueLayout __key_t = C_INT;
    public static ValueLayout __clockid_t = C_INT;
    public static ValueLayout __blksize_t = C_LONG;
    public static ValueLayout __blkcnt_t = C_LONG;
    public static ValueLayout __blkcnt64_t = C_LONG;
    public static ValueLayout __fsword_t = C_LONG;
    public static ValueLayout __ssize_t = C_LONG;
    public static ValueLayout __syscall_slong_t = C_LONG;
    public static ValueLayout __loff_t = C_LONG;
    public static ValueLayout __intptr_t = C_LONG;
    public static ValueLayout __sig_atomic_t = C_INT;
    public static ValueLayout int16_t = C_SHORT;
    public static ValueLayout int32_t = C_INT;
    public static ValueLayout int64_t = C_LONG;
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG;
    public static ValueLayout int_fast16_t = C_LONG;
    public static ValueLayout int_fast32_t = C_LONG;
    public static ValueLayout int_fast64_t = C_LONG;
    public static ValueLayout intptr_t = C_LONG;
    public static ValueLayout intmax_t = C_LONG;
    public static ValueLayout quad_t = C_LONG;
    public static ValueLayout loff_t = C_LONG;
    public static ValueLayout off_t = C_LONG;
    public static ValueLayout pid_t = C_INT;
    public static ValueLayout ssize_t = C_LONG;
    public static ValueLayout daddr_t = C_INT;
    public static ValueLayout key_t = C_INT;
    public static ValueLayout clock_t = C_LONG;
    public static ValueLayout clockid_t = C_INT;
    public static ValueLayout time_t = C_LONG;
    public static ValueLayout register_t = C_LONG;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__bswap_16$MH, "__bswap_16");
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__bswap_32$MH, "__bswap_32");
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__bswap_64$MH, "__bswap_64");
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__uint16_identity$MH, "__uint16_identity");
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__uint32_identity$MH, "__uint32_identity");
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$3.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.__uint64_identity$MH, "__uint64_identity");
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout suseconds_t = C_LONG;
    public static ValueLayout __fd_mask = C_LONG;
    public static ValueLayout fd_mask = C_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$3.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.select$MH, "select");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$3.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.pselect$MH, "pselect");
        try {
            return (int)mh$.invokeExact(__nfds, __readfds.address(), __writefds.address(), __exceptfds.address(), __timeout.address(), __sigmask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout blksize_t = C_LONG;
    public static ValueLayout blkcnt_t = C_LONG;
    public static ValueLayout pthread_once_t = C_INT;
    public static ValueLayout pthread_spinlock_t = C_INT;
    public static MethodHandle fuse_parse_conn_info_opts$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fuse_parse_conn_info_opts$MH,"fuse_parse_conn_info_opts");
    }
    public static MemoryAddress fuse_parse_conn_info_opts ( Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.fuse_parse_conn_info_opts$MH, "fuse_parse_conn_info_opts");
        try {
            return (MemoryAddress)mh$.invokeExact(args.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_apply_conn_info_opts$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fuse_apply_conn_info_opts$MH,"fuse_apply_conn_info_opts");
    }
    public static void fuse_apply_conn_info_opts ( Addressable opts,  Addressable conn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.fuse_apply_conn_info_opts$MH, "fuse_apply_conn_info_opts");
        try {
            mh$.invokeExact(opts.address(), conn.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_daemonize$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fuse_daemonize$MH,"fuse_daemonize");
    }
    public static int fuse_daemonize ( int foreground) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.fuse_daemonize$MH, "fuse_daemonize");
        try {
            return (int)mh$.invokeExact(foreground);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_version$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_version$MH,"fuse_version");
    }
    public static int fuse_version () {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_version$MH, "fuse_version");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_pkgversion$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_pkgversion$MH,"fuse_pkgversion");
    }
    public static MemoryAddress fuse_pkgversion () {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_pkgversion$MH, "fuse_pkgversion");
        try {
            return (MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_pollhandle_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_pollhandle_destroy$MH,"fuse_pollhandle_destroy");
    }
    public static void fuse_pollhandle_destroy ( Addressable ph) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_pollhandle_destroy$MH, "fuse_pollhandle_destroy");
        try {
            mh$.invokeExact(ph.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_BUF_IS_FD() {
        return (int)2L;
    }
    public static int FUSE_BUF_FD_SEEK() {
        return (int)4L;
    }
    public static int FUSE_BUF_FD_RETRY() {
        return (int)8L;
    }
    public static int FUSE_BUF_NO_SPLICE() {
        return (int)2L;
    }
    public static int FUSE_BUF_FORCE_SPLICE() {
        return (int)4L;
    }
    public static int FUSE_BUF_SPLICE_MOVE() {
        return (int)8L;
    }
    public static int FUSE_BUF_SPLICE_NONBLOCK() {
        return (int)16L;
    }
    public static MethodHandle fuse_buf_size$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_buf_size$MH,"fuse_buf_size");
    }
    public static long fuse_buf_size ( Addressable bufv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_buf_size$MH, "fuse_buf_size");
        try {
            return (long)mh$.invokeExact(bufv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_buf_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_buf_copy$MH,"fuse_buf_copy");
    }
    public static long fuse_buf_copy ( Addressable dst,  Addressable src,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_buf_copy$MH, "fuse_buf_copy");
        try {
            return (long)mh$.invokeExact(dst.address(), src.address(), flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_set_signal_handlers$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fuse_set_signal_handlers$MH,"fuse_set_signal_handlers");
    }
    public static int fuse_set_signal_handlers ( Addressable se) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fuse_set_signal_handlers$MH, "fuse_set_signal_handlers");
        try {
            return (int)mh$.invokeExact(se.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_remove_signal_handlers$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fuse_remove_signal_handlers$MH,"fuse_remove_signal_handlers");
    }
    public static void fuse_remove_signal_handlers ( Addressable se) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.fuse_remove_signal_handlers$MH, "fuse_remove_signal_handlers");
        try {
            mh$.invokeExact(se.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$5.fcntl$MH,"fcntl");
    }
    public static int fcntl ( int __fd,  int __cmd, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.fcntl$MH, "fcntl");
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$5.open$MH,"open");
    }
    public static int open ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.open$MH, "open");
        try {
            return (int)mh$.invokeExact(__file.address(), __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.openat$MH,"openat");
    }
    public static int openat ( int __fd,  Addressable __file,  int __oflag, Object... x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.openat$MH, "openat");
        try {
            return (int)mh$.invokeExact(__fd, __file.address(), __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$5.creat$MH,"creat");
    }
    public static int creat ( Addressable __file,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.creat$MH, "creat");
        try {
            return (int)mh$.invokeExact(__file.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lockf$MH,"lockf");
    }
    public static int lockf ( int __fd,  int __cmd,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.lockf$MH, "lockf");
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$6.posix_fadvise$MH,"posix_fadvise");
    }
    public static int posix_fadvise ( int __fd,  long __offset,  long __len,  int __advise) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.posix_fadvise$MH, "posix_fadvise");
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$6.posix_fallocate$MH,"posix_fallocate");
    }
    public static int posix_fallocate ( int __fd,  long __offset,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.posix_fallocate$MH, "posix_fallocate");
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$6.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.clock$MH, "clock");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$6.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.time$MH, "time");
        try {
            return (long)mh$.invokeExact(__timer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$6.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.difftime$MH, "difftime");
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.mktime$MH, "mktime");
        try {
            return (long)mh$.invokeExact(__tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strftime$MH, "strftime");
        try {
            return (long)mh$.invokeExact(__s.address(), __maxsize, __format.address(), __tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.strftime_l$MH, "strftime_l");
        try {
            return (long)mh$.invokeExact(__s.address(), __maxsize, __format.address(), __tp.address(), __loc.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$7.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.gmtime$MH, "gmtime");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$7.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.localtime$MH, "localtime");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.gmtime_r$MH, "gmtime_r");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address(), __tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.localtime_r$MH, "localtime_r");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address(), __tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$8.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.asctime$MH, "asctime");
        try {
            return (MemoryAddress)mh$.invokeExact(__tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.ctime$MH, "ctime");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.asctime_r$MH, "asctime_r");
        try {
            return (MemoryAddress)mh$.invokeExact(__tp.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$8.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.ctime_r$MH, "ctime_r");
        try {
            return (MemoryAddress)mh$.invokeExact(__timer.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$8.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$8.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$8.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$8.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$8.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$8.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$8.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$9.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$9.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$9.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$9.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$9.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$9.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$9.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.tzset$MH, "tzset");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$9.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$9.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$9.daylight$VH.get(RuntimeHelper.requireNonNull(constants$9.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$9.daylight$VH.set(RuntimeHelper.requireNonNull(constants$9.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$9.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$9.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$9.timezone$VH.get(RuntimeHelper.requireNonNull(constants$9.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$9.timezone$VH.set(RuntimeHelper.requireNonNull(constants$9.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$9.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.timegm$MH, "timegm");
        try {
            return (long)mh$.invokeExact(__tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$10.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.timelocal$MH, "timelocal");
        try {
            return (long)mh$.invokeExact(__tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$10.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.dysize$MH, "dysize");
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$10.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.nanosleep$MH, "nanosleep");
        try {
            return (int)mh$.invokeExact(__requested_time.address(), __remaining.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$10.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.clock_getres$MH, "clock_getres");
        try {
            return (int)mh$.invokeExact(__clock_id, __res.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$10.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.clock_gettime$MH, "clock_gettime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$10.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.clock_settime$MH, "clock_settime");
        try {
            return (int)mh$.invokeExact(__clock_id, __tp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$11.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.clock_nanosleep$MH, "clock_nanosleep");
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req.address(), __rem.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$11.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.clock_getcpuclockid$MH, "clock_getcpuclockid");
        try {
            return (int)mh$.invokeExact(__pid, __clock_id.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$11.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.timer_create$MH, "timer_create");
        try {
            return (int)mh$.invokeExact(__clock_id, __evp.address(), __timerid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$11.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.timer_delete$MH, "timer_delete");
        try {
            return (int)mh$.invokeExact(__timerid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$11.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.timer_settime$MH, "timer_settime");
        try {
            return (int)mh$.invokeExact(__timerid.address(), __flags, __value.address(), __ovalue.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$11.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.timer_gettime$MH, "timer_gettime");
        try {
            return (int)mh$.invokeExact(__timerid.address(), __value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$12.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.timer_getoverrun$MH, "timer_getoverrun");
        try {
            return (int)mh$.invokeExact(__timerid.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$12.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.timespec_get$MH, "timespec_get");
        try {
            return (int)mh$.invokeExact(__ts.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.stat$MH,"stat");
    }
    public static int stat ( Addressable __file,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.stat$MH, "stat");
        try {
            return (int)mh$.invokeExact(__file.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fstat$MH,"fstat");
    }
    public static int fstat ( int __fd,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.fstat$MH, "fstat");
        try {
            return (int)mh$.invokeExact(__fd, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fstatat$MH,"fstatat");
    }
    public static int fstatat ( int __fd,  Addressable __file,  Addressable __buf,  int __flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.fstatat$MH, "fstatat");
        try {
            return (int)mh$.invokeExact(__fd, __file.address(), __buf.address(), __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.lstat$MH,"lstat");
    }
    public static int lstat ( Addressable __file,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.lstat$MH, "lstat");
        try {
            return (int)mh$.invokeExact(__file.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$13.chmod$MH,"chmod");
    }
    public static int chmod ( Addressable __file,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.chmod$MH, "chmod");
        try {
            return (int)mh$.invokeExact(__file.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$13.lchmod$MH,"lchmod");
    }
    public static int lchmod ( Addressable __file,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.lchmod$MH, "lchmod");
        try {
            return (int)mh$.invokeExact(__file.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fchmod$MH,"fchmod");
    }
    public static int fchmod ( int __fd,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.fchmod$MH, "fchmod");
        try {
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fchmodat$MH,"fchmodat");
    }
    public static int fchmodat ( int __fd,  Addressable __file,  int __mode,  int __flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.fchmodat$MH, "fchmodat");
        try {
            return (int)mh$.invokeExact(__fd, __file.address(), __mode, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$13.umask$MH,"umask");
    }
    public static int umask ( int __mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.umask$MH, "umask");
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mkdir$MH,"mkdir");
    }
    public static int mkdir ( Addressable __path,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.mkdir$MH, "mkdir");
        try {
            return (int)mh$.invokeExact(__path.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkdirat$MH,"mkdirat");
    }
    public static int mkdirat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkdirat$MH, "mkdirat");
        try {
            return (int)mh$.invokeExact(__fd, __path.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mknod$MH,"mknod");
    }
    public static int mknod ( Addressable __path,  int __mode,  long __dev) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mknod$MH, "mknod");
        try {
            return (int)mh$.invokeExact(__path.address(), __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mknodat$MH,"mknodat");
    }
    public static int mknodat ( int __fd,  Addressable __path,  int __mode,  long __dev) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mknodat$MH, "mknodat");
        try {
            return (int)mh$.invokeExact(__fd, __path.address(), __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkfifo$MH,"mkfifo");
    }
    public static int mkfifo ( Addressable __path,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkfifo$MH, "mkfifo");
        try {
            return (int)mh$.invokeExact(__path.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.mkfifoat$MH,"mkfifoat");
    }
    public static int mkfifoat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.mkfifoat$MH, "mkfifoat");
        try {
            return (int)mh$.invokeExact(__fd, __path.address(), __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.utimensat$MH,"utimensat");
    }
    public static int utimensat ( int __fd,  Addressable __path,  Addressable __times,  int __flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.utimensat$MH, "utimensat");
        try {
            return (int)mh$.invokeExact(__fd, __path.address(), __times.address(), __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$15.futimens$MH,"futimens");
    }
    public static int futimens ( int __fd,  Addressable __times) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.futimens$MH, "futimens");
        try {
            return (int)mh$.invokeExact(__fd, __times.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ST_RDONLY() {
        return (int)1L;
    }
    public static int ST_NOSUID() {
        return (int)2L;
    }
    public static MethodHandle statvfs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.statvfs$MH,"statvfs");
    }
    public static int statvfs ( Addressable __file,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.statvfs$MH, "statvfs");
        try {
            return (int)mh$.invokeExact(__file.address(), __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatvfs$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fstatvfs$MH,"fstatvfs");
    }
    public static int fstatvfs ( int __fildes,  Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.fstatvfs$MH, "fstatvfs");
        try {
            return (int)mh$.invokeExact(__fildes, __buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.readv$MH,"readv");
    }
    public static long readv ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.readv$MH, "readv");
        try {
            return (long)mh$.invokeExact(__fd, __iovec.address(), __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle writev$MH() {
        return RuntimeHelper.requireNonNull(constants$15.writev$MH,"writev");
    }
    public static long writev ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.writev$MH, "writev");
        try {
            return (long)mh$.invokeExact(__fd, __iovec.address(), __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.preadv$MH,"preadv");
    }
    public static long preadv ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.preadv$MH, "preadv");
        try {
            return (long)mh$.invokeExact(__fd, __iovec.address(), __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev$MH() {
        return RuntimeHelper.requireNonNull(constants$16.pwritev$MH,"pwritev");
    }
    public static long pwritev ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.pwritev$MH, "pwritev");
        try {
            return (long)mh$.invokeExact(__fd, __iovec.address(), __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_READDIR_PLUS() {
        return (int)1L;
    }
    public static int FUSE_FILL_DIR_PLUS() {
        return (int)2L;
    }
    public static MethodHandle fuse_lib_help$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fuse_lib_help$MH,"fuse_lib_help");
    }
    public static void fuse_lib_help ( Addressable args) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.fuse_lib_help$MH, "fuse_lib_help");
        try {
            mh$.invokeExact(args.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_new$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fuse_new$MH,"fuse_new");
    }
    public static MemoryAddress fuse_new ( Addressable args,  Addressable op,  long op_size,  Addressable private_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.fuse_new$MH, "fuse_new");
        try {
            return (MemoryAddress)mh$.invokeExact(args.address(), op.address(), op_size, private_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_mount$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fuse_mount$MH,"fuse_mount");
    }
    public static int fuse_mount ( Addressable f,  Addressable mountpoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.fuse_mount$MH, "fuse_mount");
        try {
            return (int)mh$.invokeExact(f.address(), mountpoint.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_unmount$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_unmount$MH,"fuse_unmount");
    }
    public static void fuse_unmount ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_unmount$MH, "fuse_unmount");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_destroy$MH,"fuse_destroy");
    }
    public static void fuse_destroy ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_destroy$MH, "fuse_destroy");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_loop$MH,"fuse_loop");
    }
    public static int fuse_loop ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_loop$MH, "fuse_loop");
        try {
            return (int)mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_exit$MH,"fuse_exit");
    }
    public static void fuse_exit ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_exit$MH, "fuse_exit");
        try {
            mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_loop_mt$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_loop_mt$MH,"fuse_loop_mt");
    }
    public static int fuse_loop_mt ( Addressable f,  Addressable config) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_loop_mt$MH, "fuse_loop_mt");
        try {
            return (int)mh$.invokeExact(f.address(), config.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_get_context$MH() {
        return RuntimeHelper.requireNonNull(constants$17.fuse_get_context$MH,"fuse_get_context");
    }
    public static MemoryAddress fuse_get_context () {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.fuse_get_context$MH, "fuse_get_context");
        try {
            return (MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_getgroups$MH,"fuse_getgroups");
    }
    public static int fuse_getgroups ( int size,  Addressable list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_getgroups$MH, "fuse_getgroups");
        try {
            return (int)mh$.invokeExact(size, list.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_interrupted$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_interrupted$MH,"fuse_interrupted");
    }
    public static int fuse_interrupted () {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_interrupted$MH, "fuse_interrupted");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_invalidate_path$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_invalidate_path$MH,"fuse_invalidate_path");
    }
    public static int fuse_invalidate_path ( Addressable f,  Addressable path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_invalidate_path$MH, "fuse_invalidate_path");
        try {
            return (int)mh$.invokeExact(f.address(), path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_main_real$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_main_real$MH,"fuse_main_real");
    }
    public static int fuse_main_real ( int argc,  Addressable argv,  Addressable op,  long op_size,  Addressable private_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_main_real$MH, "fuse_main_real");
        try {
            return (int)mh$.invokeExact(argc, argv.address(), op.address(), op_size, private_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_start_cleanup_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_start_cleanup_thread$MH,"fuse_start_cleanup_thread");
    }
    public static int fuse_start_cleanup_thread ( Addressable fuse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_start_cleanup_thread$MH, "fuse_start_cleanup_thread");
        try {
            return (int)mh$.invokeExact(fuse.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_stop_cleanup_thread$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fuse_stop_cleanup_thread$MH,"fuse_stop_cleanup_thread");
    }
    public static void fuse_stop_cleanup_thread ( Addressable fuse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fuse_stop_cleanup_thread$MH, "fuse_stop_cleanup_thread");
        try {
            mh$.invokeExact(fuse.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_clean_cache$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_clean_cache$MH,"fuse_clean_cache");
    }
    public static int fuse_clean_cache ( Addressable fuse) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_clean_cache$MH, "fuse_clean_cache");
        try {
            return (int)mh$.invokeExact(fuse.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_getattr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_fs_getattr$MH,"fuse_fs_getattr");
    }
    public static int fuse_fs_getattr ( Addressable fs,  Addressable path,  Addressable buf,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_fs_getattr$MH, "fuse_fs_getattr");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_rename$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_fs_rename$MH,"fuse_fs_rename");
    }
    public static int fuse_fs_rename ( Addressable fs,  Addressable oldpath,  Addressable newpath,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_fs_rename$MH, "fuse_fs_rename");
        try {
            return (int)mh$.invokeExact(fs.address(), oldpath.address(), newpath.address(), flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_fs_unlink$MH,"fuse_fs_unlink");
    }
    public static int fuse_fs_unlink ( Addressable fs,  Addressable path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_fs_unlink$MH, "fuse_fs_unlink");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_fs_rmdir$MH,"fuse_fs_rmdir");
    }
    public static int fuse_fs_rmdir ( Addressable fs,  Addressable path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_fs_rmdir$MH, "fuse_fs_rmdir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$19.fuse_fs_symlink$MH,"fuse_fs_symlink");
    }
    public static int fuse_fs_symlink ( Addressable fs,  Addressable linkname,  Addressable path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.fuse_fs_symlink$MH, "fuse_fs_symlink");
        try {
            return (int)mh$.invokeExact(fs.address(), linkname.address(), path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_link$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_link$MH,"fuse_fs_link");
    }
    public static int fuse_fs_link ( Addressable fs,  Addressable oldpath,  Addressable newpath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_link$MH, "fuse_fs_link");
        try {
            return (int)mh$.invokeExact(fs.address(), oldpath.address(), newpath.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_release$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_release$MH,"fuse_fs_release");
    }
    public static int fuse_fs_release ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_release$MH, "fuse_fs_release");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_open$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_open$MH,"fuse_fs_open");
    }
    public static int fuse_fs_open ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_open$MH, "fuse_fs_open");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_read$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_read$MH,"fuse_fs_read");
    }
    public static int fuse_fs_read ( Addressable fs,  Addressable path,  Addressable buf,  long size,  long off,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_read$MH, "fuse_fs_read");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_read_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_read_buf$MH,"fuse_fs_read_buf");
    }
    public static int fuse_fs_read_buf ( Addressable fs,  Addressable path,  Addressable bufp,  long size,  long off,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_read_buf$MH, "fuse_fs_read_buf");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), bufp.address(), size, off, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_write$MH() {
        return RuntimeHelper.requireNonNull(constants$20.fuse_fs_write$MH,"fuse_fs_write");
    }
    public static int fuse_fs_write ( Addressable fs,  Addressable path,  Addressable buf,  long size,  long off,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.fuse_fs_write$MH, "fuse_fs_write");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), size, off, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_write_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_write_buf$MH,"fuse_fs_write_buf");
    }
    public static int fuse_fs_write_buf ( Addressable fs,  Addressable path,  Addressable buf,  long off,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_write_buf$MH, "fuse_fs_write_buf");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), off, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_fsync$MH,"fuse_fs_fsync");
    }
    public static int fuse_fs_fsync ( Addressable fs,  Addressable path,  int datasync,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_fsync$MH, "fuse_fs_fsync");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_flush$MH,"fuse_fs_flush");
    }
    public static int fuse_fs_flush ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_flush$MH, "fuse_fs_flush");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_statfs$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_statfs$MH,"fuse_fs_statfs");
    }
    public static int fuse_fs_statfs ( Addressable fs,  Addressable path,  Addressable buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_statfs$MH, "fuse_fs_statfs");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_opendir$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_opendir$MH,"fuse_fs_opendir");
    }
    public static int fuse_fs_opendir ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_opendir$MH, "fuse_fs_opendir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_readdir$MH() {
        return RuntimeHelper.requireNonNull(constants$21.fuse_fs_readdir$MH,"fuse_fs_readdir");
    }
    public static int fuse_fs_readdir ( Addressable fs,  Addressable path,  Addressable buf,  Addressable filler,  long off,  Addressable fi,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.fuse_fs_readdir$MH, "fuse_fs_readdir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), filler.address(), off, fi.address(), flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fsyncdir$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_fsyncdir$MH,"fuse_fs_fsyncdir");
    }
    public static int fuse_fs_fsyncdir ( Addressable fs,  Addressable path,  int datasync,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_fsyncdir$MH, "fuse_fs_fsyncdir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), datasync, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_releasedir$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_releasedir$MH,"fuse_fs_releasedir");
    }
    public static int fuse_fs_releasedir ( Addressable fs,  Addressable path,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_releasedir$MH, "fuse_fs_releasedir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_create$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_create$MH,"fuse_fs_create");
    }
    public static int fuse_fs_create ( Addressable fs,  Addressable path,  int mode,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_create$MH, "fuse_fs_create");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mode, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_lock$MH,"fuse_fs_lock");
    }
    public static int fuse_fs_lock ( Addressable fs,  Addressable path,  Addressable fi,  int cmd,  Addressable lock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_lock$MH, "fuse_fs_lock");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address(), cmd, lock.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_flock$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_flock$MH,"fuse_fs_flock");
    }
    public static int fuse_fs_flock ( Addressable fs,  Addressable path,  Addressable fi,  int op) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_flock$MH, "fuse_fs_flock");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address(), op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$22.fuse_fs_chmod$MH,"fuse_fs_chmod");
    }
    public static int fuse_fs_chmod ( Addressable fs,  Addressable path,  int mode,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.fuse_fs_chmod$MH, "fuse_fs_chmod");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mode, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_chown$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_chown$MH,"fuse_fs_chown");
    }
    public static int fuse_fs_chown ( Addressable fs,  Addressable path,  int uid,  int gid,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_chown$MH, "fuse_fs_chown");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), uid, gid, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_truncate$MH,"fuse_fs_truncate");
    }
    public static int fuse_fs_truncate ( Addressable fs,  Addressable path,  long size,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_truncate$MH, "fuse_fs_truncate");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), size, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_utimens$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_utimens$MH,"fuse_fs_utimens");
    }
    public static int fuse_fs_utimens ( Addressable fs,  Addressable path,  Addressable tv,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_utimens$MH, "fuse_fs_utimens");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), tv.address(), fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_access$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_access$MH,"fuse_fs_access");
    }
    public static int fuse_fs_access ( Addressable fs,  Addressable path,  int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_access$MH, "fuse_fs_access");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_readlink$MH,"fuse_fs_readlink");
    }
    public static int fuse_fs_readlink ( Addressable fs,  Addressable path,  Addressable buf,  long len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_readlink$MH, "fuse_fs_readlink");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), buf.address(), len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fuse_fs_mknod$MH,"fuse_fs_mknod");
    }
    public static int fuse_fs_mknod ( Addressable fs,  Addressable path,  int mode,  long rdev) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.fuse_fs_mknod$MH, "fuse_fs_mknod");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mode, rdev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_mkdir$MH,"fuse_fs_mkdir");
    }
    public static int fuse_fs_mkdir ( Addressable fs,  Addressable path,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_mkdir$MH, "fuse_fs_mkdir");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_setxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_setxattr$MH,"fuse_fs_setxattr");
    }
    public static int fuse_fs_setxattr ( Addressable fs,  Addressable path,  Addressable name,  Addressable value,  long size,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_setxattr$MH, "fuse_fs_setxattr");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), name.address(), value.address(), size, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_getxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_getxattr$MH,"fuse_fs_getxattr");
    }
    public static int fuse_fs_getxattr ( Addressable fs,  Addressable path,  Addressable name,  Addressable value,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_getxattr$MH, "fuse_fs_getxattr");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), name.address(), value.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_listxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_listxattr$MH,"fuse_fs_listxattr");
    }
    public static int fuse_fs_listxattr ( Addressable fs,  Addressable path,  Addressable list,  long size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_listxattr$MH, "fuse_fs_listxattr");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), list.address(), size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_removexattr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_removexattr$MH,"fuse_fs_removexattr");
    }
    public static int fuse_fs_removexattr ( Addressable fs,  Addressable path,  Addressable name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_removexattr$MH, "fuse_fs_removexattr");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_bmap$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fuse_fs_bmap$MH,"fuse_fs_bmap");
    }
    public static int fuse_fs_bmap ( Addressable fs,  Addressable path,  long blocksize,  Addressable idx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.fuse_fs_bmap$MH, "fuse_fs_bmap");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), blocksize, idx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_ioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_ioctl$MH,"fuse_fs_ioctl");
    }
    public static int fuse_fs_ioctl ( Addressable fs,  Addressable path,  int cmd,  Addressable arg,  Addressable fi,  int flags,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_ioctl$MH, "fuse_fs_ioctl");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), cmd, arg.address(), fi.address(), flags, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_poll$MH,"fuse_fs_poll");
    }
    public static int fuse_fs_poll ( Addressable fs,  Addressable path,  Addressable fi,  Addressable ph,  Addressable reventsp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_poll$MH, "fuse_fs_poll");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), fi.address(), ph.address(), reventsp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_fallocate$MH,"fuse_fs_fallocate");
    }
    public static int fuse_fs_fallocate ( Addressable fs,  Addressable path,  int mode,  long offset,  long length,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_fallocate$MH, "fuse_fs_fallocate");
        try {
            return (int)mh$.invokeExact(fs.address(), path.address(), mode, offset, length, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_copy_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_copy_file_range$MH,"fuse_fs_copy_file_range");
    }
    public static long fuse_fs_copy_file_range ( Addressable fs,  Addressable path_in,  Addressable fi_in,  long off_in,  Addressable path_out,  Addressable fi_out,  long off_out,  long len,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_copy_file_range$MH, "fuse_fs_copy_file_range");
        try {
            return (long)mh$.invokeExact(fs.address(), path_in.address(), fi_in.address(), off_in, path_out.address(), fi_out.address(), off_out, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_lseek$MH,"fuse_fs_lseek");
    }
    public static long fuse_fs_lseek ( Addressable fs,  Addressable path,  long off,  int whence,  Addressable fi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_lseek$MH, "fuse_fs_lseek");
        try {
            return (long)mh$.invokeExact(fs.address(), path.address(), off, whence, fi.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_init$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fuse_fs_init$MH,"fuse_fs_init");
    }
    public static void fuse_fs_init ( Addressable fs,  Addressable conn,  Addressable cfg) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.fuse_fs_init$MH, "fuse_fs_init");
        try {
            mh$.invokeExact(fs.address(), conn.address(), cfg.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_fs_destroy$MH,"fuse_fs_destroy");
    }
    public static void fuse_fs_destroy ( Addressable fs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fuse_fs_destroy$MH, "fuse_fs_destroy");
        try {
            mh$.invokeExact(fs.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_notify_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_notify_poll$MH,"fuse_notify_poll");
    }
    public static int fuse_notify_poll ( Addressable ph) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fuse_notify_poll$MH, "fuse_notify_poll");
        try {
            return (int)mh$.invokeExact(ph.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_fs_new$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_fs_new$MH,"fuse_fs_new");
    }
    public static MemoryAddress fuse_fs_new ( Addressable op,  long op_size,  Addressable private_data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fuse_fs_new$MH, "fuse_fs_new");
        try {
            return (MemoryAddress)mh$.invokeExact(op.address(), op_size, private_data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_get_session$MH() {
        return RuntimeHelper.requireNonNull(constants$26.fuse_get_session$MH,"fuse_get_session");
    }
    public static MemoryAddress fuse_get_session ( Addressable f) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.fuse_get_session$MH, "fuse_get_session");
        try {
            return (MemoryAddress)mh$.invokeExact(f.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fuse_open_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fuse_open_channel$MH,"fuse_open_channel");
    }
    public static int fuse_open_channel ( Addressable mountpoint,  Addressable options) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.fuse_open_channel$MH, "fuse_open_channel");
        try {
            return (int)mh$.invokeExact(mountpoint.address(), options.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FUSE_OPT_KEY_OPT() {
        return (int)-1L;
    }
    public static int FUSE_OPT_KEY_NONOPT() {
        return (int)-2L;
    }
    public static int FUSE_OPT_KEY_KEEP() {
        return (int)-3L;
    }
    public static int FUSE_OPT_KEY_DISCARD() {
        return (int)-4L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int FUSE_VERSION() {
        return (int)310L;
    }
    public static int FUSE_CAP_ASYNC_READ() {
        return (int)1L;
    }
    public static int FUSE_CAP_POSIX_LOCKS() {
        return (int)2L;
    }
    public static int FUSE_CAP_ATOMIC_O_TRUNC() {
        return (int)8L;
    }
    public static int FUSE_CAP_EXPORT_SUPPORT() {
        return (int)16L;
    }
    public static int FUSE_CAP_DONT_MASK() {
        return (int)64L;
    }
    public static int FUSE_CAP_SPLICE_WRITE() {
        return (int)128L;
    }
    public static int FUSE_CAP_SPLICE_MOVE() {
        return (int)256L;
    }
    public static int FUSE_CAP_SPLICE_READ() {
        return (int)512L;
    }
    public static int FUSE_CAP_FLOCK_LOCKS() {
        return (int)1024L;
    }
    public static int FUSE_CAP_IOCTL_DIR() {
        return (int)2048L;
    }
    public static int FUSE_CAP_AUTO_INVAL_DATA() {
        return (int)4096L;
    }
    public static int FUSE_CAP_READDIRPLUS() {
        return (int)8192L;
    }
    public static int FUSE_CAP_READDIRPLUS_AUTO() {
        return (int)16384L;
    }
    public static int FUSE_CAP_ASYNC_DIO() {
        return (int)32768L;
    }
    public static int FUSE_CAP_WRITEBACK_CACHE() {
        return (int)65536L;
    }
    public static int FUSE_CAP_NO_OPEN_SUPPORT() {
        return (int)131072L;
    }
    public static int FUSE_CAP_PARALLEL_DIROPS() {
        return (int)262144L;
    }
    public static int FUSE_CAP_POSIX_ACL() {
        return (int)524288L;
    }
    public static int FUSE_CAP_HANDLE_KILLPRIV() {
        return (int)1048576L;
    }
    public static int FUSE_CAP_CACHE_SYMLINKS() {
        return (int)8388608L;
    }
    public static int FUSE_CAP_NO_OPENDIR_SUPPORT() {
        return (int)16777216L;
    }
    public static int FUSE_CAP_EXPLICIT_INVAL_DATA() {
        return (int)33554432L;
    }
    public static int FUSE_IOCTL_COMPAT() {
        return (int)1L;
    }
    public static int FUSE_IOCTL_UNRESTRICTED() {
        return (int)2L;
    }
    public static int FUSE_IOCTL_RETRY() {
        return (int)4L;
    }
    public static int FUSE_IOCTL_DIR() {
        return (int)16L;
    }
    public static int O_NDELAY() {
        return (int)2048L;
    }
    public static int O_FSYNC() {
        return (int)1052672L;
    }
    public static int __O_TMPFILE() {
        return (int)4259840L;
    }
    public static int F_GETLK() {
        return (int)5L;
    }
    public static int F_SETLK() {
        return (int)6L;
    }
    public static int F_SETLKW() {
        return (int)7L;
    }
    public static int O_DIRECTORY() {
        return (int)65536L;
    }
    public static int O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int O_CLOEXEC() {
        return (int)524288L;
    }
    public static int O_DSYNC() {
        return (int)4096L;
    }
    public static int O_RSYNC() {
        return (int)1052672L;
    }
    public static int F_SETOWN() {
        return (int)8L;
    }
    public static int F_GETOWN() {
        return (int)9L;
    }
    public static int FAPPEND() {
        return (int)1024L;
    }
    public static int FFSYNC() {
        return (int)1052672L;
    }
    public static int FASYNC() {
        return (int)8192L;
    }
    public static int FNONBLOCK() {
        return (int)2048L;
    }
    public static int FNDELAY() {
        return (int)2048L;
    }
    public static int POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    public static int S_IFMT() {
        return (int)61440L;
    }
    public static int S_IFDIR() {
        return (int)16384L;
    }
    public static int S_IFCHR() {
        return (int)8192L;
    }
    public static int S_IFBLK() {
        return (int)24576L;
    }
    public static int S_IFREG() {
        return (int)32768L;
    }
    public static int S_IFIFO() {
        return (int)4096L;
    }
    public static int S_IFLNK() {
        return (int)40960L;
    }
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    public static int S_ISUID() {
        return (int)2048L;
    }
    public static int S_ISGID() {
        return (int)1024L;
    }
    public static int S_ISVTX() {
        return (int)512L;
    }
    public static int S_IRUSR() {
        return (int)256L;
    }
    public static int S_IWUSR() {
        return (int)128L;
    }
    public static int S_IXUSR() {
        return (int)64L;
    }
    public static int S_IRWXU() {
        return (int)448L;
    }
    public static int S_IRGRP() {
        return (int)32L;
    }
    public static int S_IWGRP() {
        return (int)16L;
    }
    public static int S_IXGRP() {
        return (int)8L;
    }
    public static int S_IRWXG() {
        return (int)56L;
    }
    public static int S_IROTH() {
        return (int)4L;
    }
    public static int S_IWOTH() {
        return (int)2L;
    }
    public static int S_IXOTH() {
        return (int)1L;
    }
    public static int S_IRWXO() {
        return (int)7L;
    }
    public static int AT_FDCWD() {
        return (int)-100L;
    }
    public static MemoryAddress NULL() {
        return constants$27.NULL$ADDR;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int S_IREAD() {
        return (int)256L;
    }
    public static int S_IWRITE() {
        return (int)128L;
    }
    public static int S_IEXEC() {
        return (int)64L;
    }
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    public static int ALLPERMS() {
        return (int)4095L;
    }
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    public static int UIO_MAXIOV() {
        return (int)1024L;
    }
}


